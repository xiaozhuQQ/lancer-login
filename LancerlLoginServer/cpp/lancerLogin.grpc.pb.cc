// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lancerLogin.proto

#include "lancerLogin.pb.h"
#include "lancerLogin.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace lancer {

static const char* LancerLoginServer_method_names[] = {
  "/lancer.LancerLoginServer/Register",
  "/lancer.LancerLoginServer/Login",
  "/lancer.LancerLoginServer/Notify",
};

std::unique_ptr< LancerLoginServer::Stub> LancerLoginServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LancerLoginServer::Stub> stub(new LancerLoginServer::Stub(channel));
  return stub;
}

LancerLoginServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Register_(LancerLoginServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(LancerLoginServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Notify_(LancerLoginServer_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status LancerLoginServer::Stub::Register(::grpc::ClientContext* context, const ::lancer::RegisterReq& request, ::lancer::RegisterRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::lancer::RegisterRsp>* LancerLoginServer::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::lancer::RegisterReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lancer::RegisterRsp>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lancer::RegisterRsp>* LancerLoginServer::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::lancer::RegisterReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lancer::RegisterRsp>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

::grpc::Status LancerLoginServer::Stub::Login(::grpc::ClientContext* context, const ::lancer::LoginReq& request, ::lancer::LoginRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::lancer::LoginRsp>* LancerLoginServer::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::lancer::LoginReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lancer::LoginRsp>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lancer::LoginRsp>* LancerLoginServer::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::lancer::LoginReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::lancer::LoginRsp>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::ClientReaderWriter< ::lancer::NotifyReq, ::lancer::NotifyRsp>* LancerLoginServer::Stub::NotifyRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::lancer::NotifyReq, ::lancer::NotifyRsp>::Create(channel_.get(), rpcmethod_Notify_, context);
}

::grpc::ClientAsyncReaderWriter< ::lancer::NotifyReq, ::lancer::NotifyRsp>* LancerLoginServer::Stub::AsyncNotifyRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::lancer::NotifyReq, ::lancer::NotifyRsp>::Create(channel_.get(), cq, rpcmethod_Notify_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::lancer::NotifyReq, ::lancer::NotifyRsp>* LancerLoginServer::Stub::PrepareAsyncNotifyRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::lancer::NotifyReq, ::lancer::NotifyRsp>::Create(channel_.get(), cq, rpcmethod_Notify_, context, false, nullptr);
}

LancerLoginServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LancerLoginServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LancerLoginServer::Service, ::lancer::RegisterReq, ::lancer::RegisterRsp>(
          std::mem_fn(&LancerLoginServer::Service::Register), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LancerLoginServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LancerLoginServer::Service, ::lancer::LoginReq, ::lancer::LoginRsp>(
          std::mem_fn(&LancerLoginServer::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LancerLoginServer_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< LancerLoginServer::Service, ::lancer::NotifyReq, ::lancer::NotifyRsp>(
          std::mem_fn(&LancerLoginServer::Service::Notify), this)));
}

LancerLoginServer::Service::~Service() {
}

::grpc::Status LancerLoginServer::Service::Register(::grpc::ServerContext* context, const ::lancer::RegisterReq* request, ::lancer::RegisterRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LancerLoginServer::Service::Login(::grpc::ServerContext* context, const ::lancer::LoginReq* request, ::lancer::LoginRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LancerLoginServer::Service::Notify(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::lancer::NotifyRsp, ::lancer::NotifyReq>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace lancer

